<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Assembly 8086</title>
    <link href="/2020/07/06/Assembly-8086/"/>
    <url>/2020/07/06/Assembly-8086/</url>
    
    <content type="html"><![CDATA[<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>在iOS/Mac上编译源代码后，会产生一个Mach-O的可执行文件(在Android上是EFI文件，Windows上是PE文件)。</p><pre><code class="hljs mermaid">graph LR    iOS&#x2F;Mac-- 编译成的可执行文件 --&gt;汇编-- 对应 --&gt;机器码1010</code></pre><p><img src="/img/ass_to_1010.jpg" srcset="/img/loading.gif" alt="图片alt"></p><h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><p>对于计算机来说，完成一个任务离不开三类操作：</p><ol><li>数据的地址。</li><li>数据。</li><li>读/写数据。</li></ol><p><img src="image/assemble_bus.jpg" srcset="/img/loading.gif" alt="图片alt"><br>当读时:</p><ol><li>通过地址总线指定要访问的内存地址</li><li>通过控制总线指定需要读取</li><li>通过数据总线将数据传到CPU</li></ol><p>当写时:</p><ol><li>通过地址总线指定要访问的内存地址</li><li>通过控制总线指定需要写入</li><li>通过数据总线将数据传到内存</li></ol><p>所以地址总线的”宽度“限制了寻址的大小，假如地址总线有16根，那么最大寻址是2的16次方。</p><p>地址送到地址总线前，是经过CPU内部的一个地址加法器处理后再送出来，主要是因为程序为了方便都是把内存进行分段管理，所以给出一个地址都是:<code>段地址+偏移地址</code>。<br><img src="image/assemble_transfer.jpg" srcset="/img/loading.gif" alt="图片alt"></p><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>每个CPU架构都会有对应的寄存器，8086寄存器大概分为三类如下：</p><ul><li>通用寄存器: 任意使用，自己控制</li><li>控制寄存器: IP是存放代码下一条指令的地址，FLAG是各种状态信息</li><li>段寄存器: 存放内存每个段的开始位置</li></ul><pre><code class="hljs gherkin">---------------------------------------------------------------|<span class="hljs-string"> </span>|<span class="hljs-string"> AH </span>|<span class="hljs-string"> AL </span>|<span class="hljs-string"> AX </span>|<span class="hljs-string"> ----              ----------------         </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> BH </span>|<span class="hljs-string"> BL </span>|<span class="hljs-string"> BX </span>|<span class="hljs-string">       数据寄存器                   </span>||<span class="hljs-string"> </span>|<span class="hljs-string"> CH </span>|<span class="hljs-string"> CL </span>|<span class="hljs-string"> CX </span>|<span class="hljs-string">                                   </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> DH </span>|<span class="hljs-string"> DL </span>|<span class="hljs-string"> DX </span>|<span class="hljs-string"> ----</span>|<span class="hljs-string"> </span>|<span class="hljs-string">                                              通用寄存器</span>|<span class="hljs-string"> </span>|<span class="hljs-string">      SP      </span>|<span class="hljs-string"> ---   栈顶指针 </span>|<span class="hljs-string"> </span>|<span class="hljs-string">      BP      </span>|<span class="hljs-string"> ---   栈基指针 </span>|<span class="hljs-string"> </span>|<span class="hljs-string">      SI      </span>|<span class="hljs-string"> ---   源变址                      </span>||<span class="hljs-string"> </span>|<span class="hljs-string">      DI      </span>|<span class="hljs-string"> ---   目的变址    -----------------</span><span class="hljs-string">---------------------------------------------------------------</span>|<span class="hljs-string"> </span>|<span class="hljs-string">              </span>|<span class="hljs-string">                      -------------</span>|<span class="hljs-string"> </span>|<span class="hljs-string">              </span>|<span class="hljs-string">                                  </span>||<span class="hljs-string"> </span>|<span class="hljs-string">      IP      </span>|<span class="hljs-string"> ---   指令寄存器                控制寄存器     </span>|<span class="hljs-string"> </span>|<span class="hljs-string">     FLAG     </span>|<span class="hljs-string"> ---   状态寄存器</span>|<span class="hljs-string"> </span>|<span class="hljs-string">              </span>|<span class="hljs-string">                                  </span>||<span class="hljs-string"> </span>|<span class="hljs-string">              </span>|<span class="hljs-string">                     --------------</span>|<span class="hljs-string">--------------------------------------------------------------</span>|<span class="hljs-string">                                    ---------------- </span>|<span class="hljs-string"> </span>|<span class="hljs-string">      CS      </span>|<span class="hljs-string"> ---   代码段                      </span>||<span class="hljs-string"> </span>|<span class="hljs-string">      DS      </span>|<span class="hljs-string"> ---   数据段</span>|<span class="hljs-string"> </span>|<span class="hljs-string">      SS      </span>|<span class="hljs-string"> ---   堆栈段                    段寄存器     </span>|<span class="hljs-string"> </span>|<span class="hljs-string">      ES      </span>|<span class="hljs-string"> ---   附加段                      </span>||<span class="hljs-string">                                    ---------------- </span><span class="hljs-string">---------------------------------------------------------------</span></code></pre><p>程序一般为了方便会把内存进行划分，分出来的每个段都可以用段寄存器指向，当需要访问某个段的内存时，都是用:段地址+偏移地址，的方式进行访问。</p><p>例如运行代码时 <code>CS:IP</code>指定当前运行到的代码位置；<code>DS:[0]</code>指定需要访问数据段0位置的数据；<code>SS+N</code>进行移动栈顶指针访问栈内元素或者<code>BP+N</code>访问栈内元素。</p><p><code>FLAG</code>内存放各种状态，某些汇编指令执行后，会使FLAG对应的标志位变化，比如<code>cmp</code>指令执行后，如果比较结果为真ZF标志位会置为1。</p><pre><code class="hljs gherkin">CS----&gt; -----------------------------------------------------IP----&gt; |<span class="hljs-string">                                                   </span>|        |<span class="hljs-string">                                                   </span>|        |<span class="hljs-string">                      代码段                        </span>|        |<span class="hljs-string">                                                   </span>|DS----&gt; |<span class="hljs-string">---------------------------------------------------</span>|<span class="hljs-string">                                               </span><span class="hljs-string">        </span>|<span class="hljs-string">                                                   </span>|        |<span class="hljs-string">                      数据段                        </span>|        |<span class="hljs-string">                                                   </span>|        |<span class="hljs-string">                                                   </span>|SS----&gt; |<span class="hljs-string">-------------------------------------------------- </span>|<span class="hljs-string">                                             </span><span class="hljs-string">        </span>|<span class="hljs-string">                                                   </span>|BP----&gt; |<span class="hljs-string">                       栈段                         </span>|        |<span class="hljs-string">                                                   </span>|        |<span class="hljs-string">                                                   </span>|        -----------------------------------------------------              0   1   2   3   4   5   6   7   8   9  10  11  12  13  14   15  16FLAG ----&gt;  ---------------------------------------------------------------------            |<span class="hljs-string"> CF</span>|<span class="hljs-string">   </span>|<span class="hljs-string"> PF</span>|<span class="hljs-string">   </span>|<span class="hljs-string"> AF</span>|<span class="hljs-string">   </span>|<span class="hljs-string"> ZF</span>|<span class="hljs-string"> SF</span>|<span class="hljs-string"> TF</span>|<span class="hljs-string"> IF</span>|<span class="hljs-string"> DF</span>|<span class="hljs-string"> OF</span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">                                                                                                                    </span><span class="hljs-string">            --------------------------------------------------------------------</span></code></pre><h2 id="8086汇编指令"><a href="#8086汇编指令" class="headerlink" title="8086汇编指令"></a>8086汇编指令</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>objc_msgSend</title>
    <link href="/2020/07/06/objc-msgSend/"/>
    <url>/2020/07/06/objc-msgSend/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/06/29/hello-world/"/>
    <url>/2020/06/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
