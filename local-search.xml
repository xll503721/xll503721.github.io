<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Assembly 8086</title>
    <link href="/2020/07/06/Assembly-8086/"/>
    <url>/2020/07/06/Assembly-8086/</url>
    
    <content type="html"><![CDATA[<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>在iOS/Mac上编译源代码后，会产生一个Mach-O的可执行文件(在Android上是EFI文件，Windows上是PE文件)。</p><pre><code class="hljs mermaid">graph LR    iOS&#x2F;Mac-- 编译成的可执行文件 --&gt;汇编-- 对应 --&gt;机器码1010</code></pre><p><img src="/img/ass_to_1010.jpg" srcset="/img/loading.gif" alt="图片alt"></p><h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><p>对于计算机来说，完成一个任务离不开三类操作：</p><ol><li>数据的地址。</li><li>数据。</li><li>读/写数据。</li></ol><p><img src="/img/assemble_bus.jpg" srcset="/img/loading.gif" alt="图片alt"><br>当读时:</p><ol><li>通过地址总线指定要访问的内存地址</li><li>通过控制总线指定需要读取</li><li>通过数据总线将数据传到CPU</li></ol><p>当写时:</p><ol><li>通过地址总线指定要访问的内存地址</li><li>通过控制总线指定需要写入</li><li>通过数据总线将数据传到内存</li></ol><p>所以地址总线的”宽度“限制了寻址的大小，假如地址总线有16根，那么最大寻址是2的16次方。</p><p>地址送到地址总线前，是经过CPU内部的一个地址加法器处理后再送出来，主要是因为程序为了方便都是把内存进行分段管理，所以给出一个地址都是:<code>段地址+偏移地址</code>。<br><img src="/img/assemble_transfer.jpg" srcset="/img/loading.gif" alt="图片alt"></p><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>每个CPU架构都会有对应的寄存器，8086寄存器大概分为三类如下：</p><ul><li>通用寄存器: 任意使用，自己控制</li><li>控制寄存器: IP是存放代码下一条指令的地址，FLAG是各种状态信息</li><li>段寄存器: 存放内存每个段的开始位置</li></ul><pre><code class="hljs gherkin">---------------------------------------------------------------|<span class="hljs-string"> </span>|<span class="hljs-string"> AH </span>|<span class="hljs-string"> AL </span>|<span class="hljs-string"> AX </span>|<span class="hljs-string"> ----             -----------------         </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> BH </span>|<span class="hljs-string"> BL </span>|<span class="hljs-string"> BX </span>|<span class="hljs-string">       数据寄存器                   </span>||<span class="hljs-string"> </span>|<span class="hljs-string"> CH </span>|<span class="hljs-string"> CL </span>|<span class="hljs-string"> CX </span>|<span class="hljs-string">                                   </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> DH </span>|<span class="hljs-string"> DL </span>|<span class="hljs-string"> DX </span>|<span class="hljs-string"> ----</span>|<span class="hljs-string"> </span>|<span class="hljs-string">                                              通用寄存器</span>|<span class="hljs-string"> </span>|<span class="hljs-string">      SP      </span>|<span class="hljs-string"> ---   栈顶指针 </span>|<span class="hljs-string"> </span>|<span class="hljs-string">      BP      </span>|<span class="hljs-string"> ---   栈基指针 </span>|<span class="hljs-string"> </span>|<span class="hljs-string">      SI      </span>|<span class="hljs-string"> ---   源变址                      </span>||<span class="hljs-string"> </span>|<span class="hljs-string">      DI      </span>|<span class="hljs-string"> ---   目的变址    -----------------</span><span class="hljs-string">---------------------------------------------------------------</span>|<span class="hljs-string"> </span>|<span class="hljs-string">              </span>|<span class="hljs-string">                  -----------------</span>|<span class="hljs-string"> </span>|<span class="hljs-string">              </span>|<span class="hljs-string">                                  </span>||<span class="hljs-string"> </span>|<span class="hljs-string">      IP      </span>|<span class="hljs-string"> ---   指令寄存器                控制寄存器     </span>|<span class="hljs-string"> </span>|<span class="hljs-string">     FLAG     </span>|<span class="hljs-string"> ---   状态寄存器</span>|<span class="hljs-string"> </span>|<span class="hljs-string">              </span>|<span class="hljs-string">                                  </span>||<span class="hljs-string"> </span>|<span class="hljs-string">              </span>|<span class="hljs-string">                  -----------------</span>|<span class="hljs-string">--------------------------------------------------------------</span>|<span class="hljs-string">                                   ----------------- </span>|<span class="hljs-string"> </span>|<span class="hljs-string">      CS      </span>|<span class="hljs-string"> ---   代码段                      </span>||<span class="hljs-string"> </span>|<span class="hljs-string">      DS      </span>|<span class="hljs-string"> ---   数据段</span>|<span class="hljs-string"> </span>|<span class="hljs-string">      SS      </span>|<span class="hljs-string"> ---   堆栈段                    段寄存器     </span>|<span class="hljs-string"> </span>|<span class="hljs-string">      ES      </span>|<span class="hljs-string"> ---   附加段                      </span>||<span class="hljs-string">                                   ----------------- </span><span class="hljs-string">---------------------------------------------------------------</span></code></pre><p>程序一般为了方便会把内存进行划分，分出来的每个段都可以用段寄存器指向，当需要访问某个段的内存时，都是用:段地址+偏移地址，的方式进行访问。</p><p>例如运行代码时 <code>CS:IP</code>指定当前运行到的代码位置；<code>DS:[0]</code>指定需要访问数据段0位置的数据；<code>SS+N</code>进行移动栈顶指针访问栈内元素或者<code>BP+N</code>访问栈内元素。</p><p><code>FLAG</code>内存放各种状态，某些汇编指令执行后，会使FLAG对应的标志位变化，比如<code>cmp</code>指令执行后，如果比较结果为真ZF标志位会置为1。</p><pre><code class="hljs gherkin">CS----&gt; -----------------------------------------------------IP----&gt; |<span class="hljs-string">                                                   </span>|        |<span class="hljs-string">                                                   </span>|        |<span class="hljs-string">                      代码段                        </span>|        |<span class="hljs-string">                                                   </span>|DS----&gt; |<span class="hljs-string">---------------------------------------------------</span>|<span class="hljs-string">                                               </span><span class="hljs-string">        </span>|<span class="hljs-string">                                                   </span>|        |<span class="hljs-string">                      数据段                        </span>|        |<span class="hljs-string">                                                   </span>|        |<span class="hljs-string">                                                   </span>|SS----&gt; |<span class="hljs-string">-------------------------------------------------- </span>|<span class="hljs-string">                                             </span><span class="hljs-string">        </span>|<span class="hljs-string">                                                   </span>|SP----&gt; |<span class="hljs-string">                       栈段                         </span>|BP----&gt; |<span class="hljs-string">                                                   </span>|        |<span class="hljs-string">                                                   </span>|        -----------------------------------------------------          0   1   2   3   4   5   6   7   8   9  10  11  12  13  14   15  16FLAG -&gt; ---------------------------------------------------------------------        |<span class="hljs-string"> CF</span>|<span class="hljs-string">   </span>|<span class="hljs-string"> PF</span>|<span class="hljs-string">   </span>|<span class="hljs-string"> AF</span>|<span class="hljs-string">   </span>|<span class="hljs-string"> ZF</span>|<span class="hljs-string"> SF</span>|<span class="hljs-string"> TF</span>|<span class="hljs-string"> IF</span>|<span class="hljs-string"> DF</span>|<span class="hljs-string"> OF</span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">                                                                                                                    </span><span class="hljs-string">        ---------------------------------------------------------------------</span></code></pre><h2 id="方法调用栈"><a href="#方法调用栈" class="headerlink" title="方法调用栈"></a>方法调用栈</h2><p>当调用call指令时，可以修改IP的指向，从而把代码指向新的地址执行，改变按顺序执行的情况，当call指向的地址代码执行完后，使用ret指令，可以使IP重新指向到调用call地址的下一个地址，从而实现方法调用。</p><pre><code class="hljs gherkin">低地址-------------|<span class="hljs-string">           </span>||<span class="hljs-string">           </span>||<span class="hljs-string">           </span>||<span class="hljs-string">           </span>||<span class="hljs-string">           </span>||<span class="hljs-string">           </span>||<span class="hljs-string">           </span>||<span class="hljs-string">           </span>|<span class="hljs-string">----------------------------------------</span>|<span class="hljs-string">-----------</span>|<span class="hljs-string">                                       </span>||<span class="hljs-string">   saved   </span>|<span class="hljs-string">                                       </span>|<span class="hljs-string">  </span>|<span class="hljs-string"> registers </span>|<span class="hljs-string"> &lt;-----5. 需要保存的寄存器                   </span>|<span class="hljs-string">-----------</span>|<span class="hljs-string">                                       </span>||<span class="hljs-string">  local    </span>|<span class="hljs-string">                                       </span>||<span class="hljs-string">  variable </span>|<span class="hljs-string"> &lt;-----4. 局部变量</span>|<span class="hljs-string">-----------</span>|<span class="hljs-string"> &lt;-----3. BP地址                      一个栈帧</span>|<span class="hljs-string"> BP address</span>|<span class="hljs-string">                                       </span>||<span class="hljs-string">-----------</span>|<span class="hljs-string">                                       </span>||<span class="hljs-string">ret address</span>|<span class="hljs-string"> &lt;-----2. 返回地址</span>|<span class="hljs-string">-----------</span>|<span class="hljs-string">                                       </span>||<span class="hljs-string">  Argument </span>|<span class="hljs-string"> &lt;-----1. 参数</span>|<span class="hljs-string">-----------</span>|<span class="hljs-string">                                       </span>||<span class="hljs-string">           </span>|<span class="hljs-string">----------------------------------------</span><span class="hljs-string">高地址</span></code></pre><p>一个栈帧包含方法调用时所需要保存的“现场数据”：</p><ol><li>方法需要接受参数，以便使用，所以先把参数压栈保存起来，等待使用。</li><li>方法调用完后需要回到调用处，所以需要把返回地址压栈，以便返回执行下一行代码。</li><li>BP保存当前栈基地址，可以方便访问当前方法的参数和局部变量，当BP+N时就是访问参数，当BP-N时就是访问局部变量，所以需要把BP压栈，保存上一个方法的BP值。</li><li>当前方法所使用到的局部变量全部压栈保存，以便之后使用。</li><li>保存可能需要使用到的寄存器的值，以便方法返回后能恢复。</li></ol><p>当方法调用完毕，会执行SP-N，将栈顶指针指向没调用前的地址，之前的栈数据是依然会存在，所以为了安全，每当申请局部变量区域会统一把区域存放<code>CC</code>，<code>CC</code>为断点信号，防止访问到垃圾数据。</p><h2 id="一个较完整的8086汇编代码"><a href="#一个较完整的8086汇编代码" class="headerlink" title="一个较完整的8086汇编代码"></a>一个较完整的8086汇编代码</h2><pre><code class="hljs x86asm"><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code, <span class="hljs-built_in">ds</span>:data, <span class="hljs-built_in">ss</span>:stack<span class="hljs-comment">; 栈段</span>stack <span class="hljs-meta">segment</span>    <span class="hljs-built_in">db</span> <span class="hljs-number">100</span> dup(<span class="hljs-number">0</span>)stack ends  <span class="hljs-comment">; 数据段</span>data <span class="hljs-meta">segment</span>      <span class="hljs-built_in">db</span> <span class="hljs-number">100</span> dup(<span class="hljs-number">0</span>) data ends<span class="hljs-comment">; 代码段</span>code <span class="hljs-meta">segment</span><span class="hljs-symbol">start:</span>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>, data    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>, <span class="hljs-built_in">ax</span>    <span class="hljs-comment">; 手动设置ds值</span>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>, stack     <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ss</span>, <span class="hljs-built_in">ax</span>    <span class="hljs-comment">; 手动设置ss的值</span>        <span class="hljs-comment">;----------------------------------------------------------------------</span>    <span class="hljs-keyword">push</span> <span class="hljs-number">1</span>            <span class="hljs-keyword">push</span> <span class="hljs-number">2</span>                                          <span class="hljs-comment">;&lt;-----1. 参数</span>    <span class="hljs-comment">;----------------------------------------------------------------------</span>    <span class="hljs-comment">;----------------------------------------------------------------------</span>    <span class="hljs-keyword">call</span> <span class="hljs-keyword">test</span>                                       <span class="hljs-comment">;&lt;-----2. 返回地址</span>    <span class="hljs-comment">;---------------------------------------------------------------------- </span>        <span class="hljs-comment">; 程序退出</span>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>, <span class="hljs-number">4c00h</span>    <span class="hljs-keyword">int</span> <span class="hljs-number">21h</span>     <span class="hljs-comment">; 返回值放ax寄存器</span><span class="hljs-comment">; 传递2个参数(放入栈中)    </span><span class="hljs-symbol">test:</span>    <span class="hljs-comment">;----------------------------------------------------------------------</span>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">bp</span>                                         <span class="hljs-comment">;&lt;-----3. BP地址</span>    <span class="hljs-comment">;----------------------------------------------------------------------</span>    <span class="hljs-comment">;----------------------------------------------------------------------</span>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bp</span>, <span class="hljs-built_in">sp</span> <span class="hljs-comment">; 保存sp之前的值：指向bp以前的值</span>    <span class="hljs-keyword">sub</span> <span class="hljs-built_in">sp</span>, <span class="hljs-number">4</span> <span class="hljs-comment">; 给局部变量”分配“4个字节的空间         ;&lt;-----4. 局部变量</span>    <span class="hljs-comment">;----------------------------------------------------------------------</span>        <span class="hljs-comment">;----------------------------------------------------------------------</span>    <span class="hljs-comment">; 保护可能会用到的寄存器</span>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">si</span>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">di</span>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">bx</span>                                         <span class="hljs-comment">;&lt;-----5. 需要保存的寄存器   </span>    <span class="hljs-comment">;----------------------------------------------------------------------</span>         <span class="hljs-comment">;----------------------------------------------------------------------</span>    <span class="hljs-comment">; 访问栈中的参数</span>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>, <span class="hljs-number">0x1</span>                                         <span class="hljs-keyword">add</span> <span class="hljs-built_in">ax</span>, <span class="hljs-built_in">ax</span>                                      <span class="hljs-comment">;函数逻辑</span>    <span class="hljs-comment">;----------------------------------------------------------------------</span>        <span class="hljs-comment">; 恢复寄存器的值</span>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">bx</span>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">di</span>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">si</span>                           <span class="hljs-keyword">mov</span> <span class="hljs-built_in">sp</span>, <span class="hljs-built_in">bp</span> <span class="hljs-comment">; 恢复sp</span>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">bp</span>     <span class="hljs-comment">; 恢复bp</span>    <span class="hljs-keyword">add</span> <span class="hljs-built_in">sp</span>, <span class="hljs-number">4</span>  <span class="hljs-comment">; 恢复栈平衡</span>        <span class="hljs-keyword">ret</span>                 code ends  end start</code></pre><h2 id="8086常用汇编指令"><a href="#8086常用汇编指令" class="headerlink" title="8086常用汇编指令"></a>8086常用汇编指令</h2><table><thead><tr><th>指令名称</th><th align="center">指令全称</th><th align="right">作用</th><th align="right">例子</th><th align="right">C/C++</th></tr></thead><tbody><tr><td>mov</td><td align="center">move</td><td align="right">移动值到寄存器</td><td align="right">mov ax 10h</td><td align="right">int a = 10</td></tr><tr><td>add</td><td align="center"></td><td align="right">两个值双加</td><td align="right">add ax 10h</td><td align="right">a = a + 10</td></tr><tr><td>sub</td><td align="center">subtract</td><td align="right">两个值相减</td><td align="right">sub ax 10h</td><td align="right">a = a - 10</td></tr><tr><td>call</td><td align="center"></td><td align="right">调用一个函数</td><td align="right">call method</td><td align="right">method()</td></tr><tr><td>ret</td><td align="center">return</td><td align="right">函数返回</td><td align="right">ret</td><td align="right">return</td></tr><tr><td>push</td><td align="center"></td><td align="right">将值存到栈顶</td><td align="right">push 10h</td><td align="right">stack.push(10)</td></tr><tr><td>pop</td><td align="center"></td><td align="right">将值存从栈顶弹出</td><td align="right">pop ax</td><td align="right">a = stack.pop()</td></tr><tr><td>jmp</td><td align="center">jump</td><td align="right">改变IP的指向，从而改变代码的执行顺序</td><td align="right">jmp 0x667788f</td><td align="right">go to 0x667788f</td></tr><tr><td>cmp</td><td align="center">compare</td><td align="right">比较两个值，比较后的结果会影响FLAG的ZP标记位</td><td align="right">cmp ax 11h</td><td align="right">if (a == 11)</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>objc_msgSend</title>
    <link href="/2020/07/06/objc-msgSend/"/>
    <url>/2020/07/06/objc-msgSend/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/06/29/hello-world/"/>
    <url>/2020/06/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
